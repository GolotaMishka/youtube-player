{"version":3,"sources":["components/SearchBar.js","components/VideoListItem.js","components/VideoList.js","components/VideoDetail.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","onInputChange","bind","assertThisInitialized","event","setState","target","value","onSearchTermChange","react_default","a","createElement","className","onChange","React","Component","VideoListItem","video","onUserSelected","imageUrl","snippet","thumbnails","default","url","onClick","src","alt","title","VideoList","videoItems","videos","map","components_VideoListItem","onVideoSelect","key","etag","VideoDetail","videoId","id","concat","allowFullScreen","description","App","selectedVideo","videoSearch","searchTerm","_this2","YTSearch","data","console","log","_this3","components_SearchBar","components_VideoDetail","components_VideoList","userSelected","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9227460.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { term: '' };\r\n\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n    }\r\n\r\n    onInputChange(event) {\r\n        this.setState({ term: event.target.value });\r\n        this.props.onSearchTermChange(event.target.value);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"search-bar\">\r\n                <input                \r\n                    value={this.state.term}\r\n                    onChange={this.onInputChange} \r\n                />               \r\n            </div>\r\n        );        \r\n    }\r\n\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst VideoListItem = (props) => {\r\n    const video = props.video;\r\n    const onUserSelected = props.onUserSelected;\r\n    // console.log(video);    \r\n    const imageUrl = video.snippet.thumbnails.default.url;\r\n\r\n    return (\r\n    <li onClick={() => onUserSelected(video)} className=\"list-group-item\">\r\n        <div className=\"video-list media\">\r\n            <div className=\"media-left\">\r\n                <img className=\"media-object\" src={imageUrl} alt=\"\"/>\r\n            </div>\r\n            <div className=\"media-body\">\r\n                <div className=\"media-heading\">{video.snippet.title}</div>\r\n            </div>\r\n        </div>\r\n    </li>\r\n    );\r\n};\r\n\r\nexport default VideoListItem;","import React from 'react';\r\nimport VideoListItem from './VideoListItem';\r\n\r\nconst VideoList = (props) => {\r\n    const videoItems = props.videos.map((video) => {\r\n        return (\r\n            <VideoListItem \r\n                onUserSelected={props.onVideoSelect}           \r\n                key={video.etag} \r\n                video={video} />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"col-md-4 list-group\">\r\n            {videoItems}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default VideoList;","import React from 'react';\r\n\r\nconst VideoDetail = (props) => {\r\n    const video = props.video;\r\n    \r\n    if(!video){\r\n        return <div>Loading...</div>;\r\n    }\r\n    \r\n    const videoId = video.id.videoId;\r\n    const url = `https://www.youtube.com/embed/${videoId}`;\r\n\r\n    return (\r\n        <div className=\"video-detail col-md-8\">\r\n            <div className=\"embed-responsive embed-responsive-16by9\">\r\n                <iframe className=\"embed-responsive-item\" src={url} title={ video.snippet.title } allowFullScreen></iframe>\r\n            </div>\r\n            <div className=\"details\">\r\n                <div>{video.snippet.title}</div>\r\n                <div>{video.snippet.description}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoDetail;","import React, { Component } from 'react';\nimport SearchBar from './components/SearchBar';\nimport YTSearch from 'youtube-api-search';\nimport VideoList from './components/VideoList'\nimport VideoDetail from './components/VideoDetail';\nconst API_KEY = 'AIzaSyAzhHjw7RkZyqvkws-VmkdqJdyF1fDbNOo';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = { \n        videos: [],\n        selectedVideo: null\n    };\n\n    this.videoSearch('Creep');\n}\n\nvideoSearch(searchTerm) {\n  YTSearch({key: API_KEY, term: searchTerm}, (data) => {\n    console.log(data);\n      this.setState({ \n          videos: data,\n          selectedVideo: data[0]\n      });\n  });\n\n}\n  render() {\n    return (\n      <div>\n        <SearchBar onSearchTermChange={searchTerm => this.videoSearch(searchTerm)}/>\n        <VideoDetail video={this.state.selectedVideo}/>\n        <VideoList \n          onVideoSelect={userSelected => this.setState({selectedVideo: userSelected})}\n          videos={this.state.videos} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}